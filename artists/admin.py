from django.contrib import admin
from django.utils.html import format_html
from django import forms
from django.urls import reverse
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
from .models import Artist
from music.models import Album, Track


@admin.register(Artist)
class ArtistAdmin(admin.ModelAdmin):
    list_display = ['name', 'real_name', 'country', 'city', 'is_featured', 
                   'is_active', 'selected_album', 'photo_preview']
    list_filter = ['is_featured', 'is_active', 'country', 'created_at']
    search_fields = ['name', 'real_name', 'bio']
    prepopulated_fields = {'slug': ('name',)}
    date_hierarchy = 'created_at'
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'real_name', 'bio', 'slogan')
        }),
        ('–ú–µ–¥–∏–∞', {
            'fields': ('photo', 'banner')
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç—ã', {
            'fields': ('email', 'website'),
        }),
        ('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', {
            'fields': ('instagram_url', 'facebook_url', 'twitter_url', 'tiktok_url',
                      'soundcloud_url', 'spotify_url', 'youtube_url', 
                      'bandcamp_url', 'beatport_url'),
            'classes': ('collapse',)
        }),
        ('–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', {
            'fields': ('country', 'city')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_featured', 'is_active', 'user')
        }),
        ('–ú—É–∑—ã–∫–∞', {
            'fields': ('latest_album',),
            'description': 'üéµ –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Ä–µ–ª–∏–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞—Ä—Ç–∏—Å—Ç–∞. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ª–∏–∑ –∏–∑ —Å–ø–∏—Å–∫–∞.'
        }),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ', {
            'fields': ('album_info',),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "latest_album":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–ª–∏–∑—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            if hasattr(request, '_obj_') and request._obj_:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–ª–∏–∑—ã
                kwargs["queryset"] = Album.objects.all().order_by('-release_date')
            else:
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–ª–∏–∑—ã
                kwargs["queryset"] = Album.objects.all().order_by('-release_date')
        return super().formfield_for_foreignkey(db_field, request, **kwargs)
    
    def get_form(self, request, obj=None, **kwargs):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ request –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ formfield_for_foreignkey
        request._obj_ = obj
        return super().get_form(request, obj, **kwargs)
    
    def save_model(self, request, obj, form, change):
        """–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–ª–∏–∑–µ"""
        super().save_model(request, obj, form, change)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–ª–∏–∑–µ
        if obj.latest_album:
            album = obj.latest_album
            obj.album_info = f"üéµ {album.title}\nüìÖ –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: {album.release_date}\nüéµ –¢—Ä–µ–∫–æ–≤: {album.tracks.count()}"
            if album.description:
                obj.album_info += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {album.description[:200]}..."
            obj.save(update_fields=['album_info'])
    
    def photo_preview(self, obj):
        if obj.photo:
            return format_html(
                '<img src="{}" style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;">',
                obj.photo.url
            )
        return "–ù–µ—Ç —Ñ–æ—Ç–æ"
    photo_preview.short_description = '–§–æ—Ç–æ'
    
    def selected_album(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–ª–∏–∑ –∞—Ä—Ç–∏—Å—Ç–∞"""
        if obj.latest_album:
            return format_html(
                '<span style="color: #4caf50; font-weight: 500;">üéµ {}</span>',
                obj.latest_album.title
            )
        return format_html('<span style="color: #999;">‚Äî</span>')
    selected_album.short_description = '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–ª–∏–∑'
    
    class Media:
        js = ('admin/js/artist_admin.js',)
