from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import Genre, Album, Track
from django import forms


class TrackInline(admin.TabularInline):
    model = Track
    extra = 3  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –ø—É—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
    fields = ['track_number', 'title', 'audio_file', 'duration', 'bpm', 'key', 'genres', 'is_published']
    readonly_fields = ['play_count']
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª–µ–π
    def get_formset(self, request, obj=None, **kwargs):
        formset = super().get_formset(request, obj, **kwargs)
        form = formset.form
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º artist –∏–∑ —Ä–µ–ª–∏–∑–∞
        if obj and obj.artist and 'artist' in form.base_fields:
            form.base_fields['artist'].initial = obj.artist
            form.base_fields['artist'].widget = forms.HiddenInput()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª—è audio_file
        if 'audio_file' in form.base_fields:
            form.base_fields['audio_file'].widget.attrs.update({
                'style': 'border: 2px solid #ff6b35; border-radius: 4px; padding: 8px; background-color: #fff3e0;',
                'accept': 'audio/*',
                'class': 'audio-file-input'
            })
            form.base_fields['audio_file'].help_text = 'üéµ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, WAV, OGG)'
        
        return formset
    
    class Media:
        css = {
            'all': ('admin/css/track_inline.css',)
        }
        js = ('admin/js/track_inline.js',)


@admin.register(Album)
class AlbumAdmin(admin.ModelAdmin):
    list_display = ['title', 'artist', 'release_date', 'track_count', 'is_active', 'cover_preview']
    list_filter = ['release_date', 'artist', 'is_active']
    search_fields = ['title', 'artist__name', 'catalog_number']
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'release_date'
    inlines = [TrackInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'release_date', 'catalog_number', 'is_active'),
            'description': '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ª–∏–∑–µ. –ê—Ä—Ç–∏—Å—Ç –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ç–∏—Å—Ç–∞.'
        }),
        ('–ú–µ–¥–∏–∞', {
            'fields': ('cover', 'description'),
            'description': '–û–±–ª–æ–∂–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞'
        }),
        ('üéµ –¢—Ä–µ–∫–∏ —Ä–µ–ª–∏–∑–∞', {
            'fields': (),
            'description': '–ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç—Ä–µ–∫–∏ –∫ —Ä–µ–ª–∏–∑—É.',
            'classes': ('wide',)
        })
    )
    
    def get_form(self, request, obj=None, **kwargs):
        """–°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ artist –∏–∑ —Ñ–æ—Ä–º—ã"""
        form = super().get_form(request, obj, **kwargs)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ artist - –æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –∞—Ä—Ç–∏—Å—Ç–∞
        if 'artist' in form.base_fields:
            form.base_fields['artist'].widget = forms.HiddenInput()
            form.base_fields['artist'].required = False
        
        return form
    
    def track_count(self, obj):
        return obj.tracks.count()
    track_count.short_description = '–¢—Ä–µ–∫–æ–≤'
    
    def cover_preview(self, obj):
        if obj.cover:
            return format_html(
                '<img src="{}" style="width: 50px; height: 50px; border-radius: 8px; object-fit: cover;">',
                obj.cover.url
            )
        return "–ù–µ—Ç –æ–±–ª–æ–∂–∫–∏"
    cover_preview.short_description = '–û–±–ª–æ–∂–∫–∞'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ–ª–∏–∑–æ–≤
    actions = ['publish_all_tracks']
    
    def publish_all_tracks(self, request, queryset):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞—Ö"""
        total_tracks = 0
        for album in queryset:
            tracks_updated = album.tracks.update(is_published=True)
            total_tracks += tracks_updated
        self.message_user(request, f'–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {total_tracks} —Ç—Ä–µ–∫–æ–≤ –≤ {queryset.count()} —Ä–µ–ª–∏–∑–∞—Ö.')
    publish_all_tracks.short_description = "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤ —Ä–µ–ª–∏–∑–∞—Ö"


@admin.register(Track)
class TrackAdmin(admin.ModelAdmin):
    list_display = ['title', 'artist', 'album', 'track_number', 'is_published', 'streaming_links']
    list_filter = ['is_published', 'artist', 'album', 'genres']
    search_fields = ['title', 'artist__name', 'album__title']
    prepopulated_fields = {'slug': ('title',)}
    readonly_fields = ['play_count', 'download_count']
    
    def get_form(self, request, obj=None, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–µ–π"""
        form = super().get_form(request, obj, **kwargs)
        
        # –£–ª—É—á—à–∞–µ–º –ø–æ–ª–µ audio_file
        if 'audio_file' in form.base_fields:
            form.base_fields['audio_file'].widget.attrs.update({
                'style': 'border: 2px solid #ff6b35; border-radius: 6px; padding: 12px; background-color: #fff3e0; font-weight: 500;',
                'accept': 'audio/*',
                'class': 'audio-file-input'
            })
            form.base_fields['audio_file'].help_text = 'üéµ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, WAV, OGG). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
        if 'track_number' in form.base_fields:
            form.base_fields['track_number'].widget.attrs['placeholder'] = '1, 2, 3...'
            form.base_fields['track_number'].help_text = '–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –≤ –∞–ª—å–±–æ–º–µ'
        
        if 'duration' in form.base_fields:
            form.base_fields['duration'].widget.attrs['placeholder'] = '3:45'
            form.base_fields['duration'].help_text = '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM:SS –∏–ª–∏ HH:MM:SS'
        
        if 'bpm' in form.base_fields:
            form.base_fields['bpm'].widget.attrs['placeholder'] = '128'
            form.base_fields['bpm'].help_text = '–¢–µ–º–ø –≤ —É–¥–∞—Ä–∞—Ö –≤ –º–∏–Ω—É—Ç—É'
        
        if 'key' in form.base_fields:
            form.base_fields['key'].widget.attrs['placeholder'] = 'Am, C, F#m...'
            form.base_fields['key'].help_text = '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞'
        
        if 'genres' in form.base_fields:
            form.base_fields['genres'].widget.attrs['placeholder'] = 'Techno, Industrial, EBM'
            form.base_fields['genres'].help_text = '–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
        
        return form
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'slug', 'artist', 'album', 'track_number')
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('duration', 'bpm', 'key', 'genres'),
            'classes': ('collapse',)
        }),
        ('üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª', {
            'fields': ('audio_file', 'cover'),
            'description': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –æ–±–ª–æ–∂–∫—É —Ç—Ä–µ–∫–∞',
            'classes': ('wide',)
        }),
        ('üéµ –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', {
            'fields': ('spotify_url', 'apple_music_url', 'youtube_url', 'beatport_url', 'soundcloud_url', 'bandcamp_url'),
            'description': '–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—Ä–µ–∫ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö',
            'classes': ('wide',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_published', 'is_featured', 'is_free_download', 'release_date'),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('play_count', 'download_count'),
            'classes': ('collapse',)
        })
    )
    
    class Media:
        css = {
            'all': ('admin/css/track_inline.css',)
        }
        js = ('admin/js/track_inline.js',)
    
    def streaming_links(self, obj):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∫–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫"""
        links = []
        
        if obj.spotify_url:
            links.append('<span title="Spotify">üéµ</span>')
        if obj.apple_music_url:
            links.append('<span title="Apple Music">üçé</span>')
        if obj.youtube_url:
            links.append('<span title="YouTube">üì∫</span>')
        if obj.beatport_url:
            links.append('<span title="Beatport">üéß</span>')
        if obj.soundcloud_url:
            links.append('<span title="SoundCloud">‚òÅÔ∏è</span>')
        if obj.bandcamp_url:
            links.append('<span title="Bandcamp">üè™</span>')
            
        return mark_safe(' '.join(links)) if links else '‚Äî'
    streaming_links.short_description = '–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã'
